# Makefile generated by OCamake 
# http://tech.motion-twin.com
VERSION=2.4
OCAMLOPT=ocamlopt
OCAMLC=ocamlc
OCAMLFIND=ocamlfind

.SUFFIXES : .ml .mli .cmo .cmx .cmi .mll .mly

INSTALLDIR=`$(OCAMLC) -where`
CFLAGS=
LFLAGS= -a
LIBS=

NATDYNLINK := $(shell if [ -f `ocamlc -where`/dynlink.cmxa ]; then echo YES; else echo NO; fi)

ifeq "${NATDYNLINK}" "YES"
CMXS=xml-light.cmxs
endif


all: xml-light.cma test.exe doc

opt: xml-light.cmxa $(CMXS) test_opt.exe

installcommon: all
	cp xml.mli xmlParser.mli dtd.mli xml.cmi xmlParser.cmi dtd.cmi $(INSTALLDIR)

installbyte: all installcommon
	cp xml-light.cma $(INSTALLDIR)

installopt: opt installcommon
	cp xml-light.a xml-light.cmxa $(CMXS) xml.cmx dtd.cmx xmlParser.cmx $(INSTALLDIR)

install: installbyte installopt

wininstall: all opt
	cp xml-light.cmxa xml-light.lib xml-light.cma xml.mli xmlParser.mli dtd.mli xml.cmi xmlParser.cmi dtd.cmi xml.cmx dtd.cmx xmlParser.cmx c:\ocaml\lib

install_ocamlfind: all opt
	sed "s|@VERSION@|$(VERSION)|g" < META.in > META
	$(OCAMLFIND) install xml-light META xml-light.a xml-light.cma xml-light.cmxa $(CMXS) xml.cmx dtd.cmx xmlParser.cmx xml.mli xmlParser.mli dtd.mli xml.cmi xmlParser.cmi dtd.cmi

doc:
	mkdir doc
	ocamldoc -sort -html -d doc xml.mli dtd.mli xmlParser.mli

test.exe: xml-light.cma
	$(OCAMLC) xml-light.cma test.ml -o test.exe

test_opt.exe: xml-light.cmxa
	$(OCAMLOPT) xml-light.cmxa test.ml -o test_opt.exe

xml-light.cma: xml_light_errors.cmo xml_light_dtd_check.cmo \
  xml_parser.cmo xml_lexer.cmo dtd.cmo xmlParser.cmo xml.cmo
	$(OCAMLC) -o xml-light.cma $(LFLAGS) $(LIBS) $^

xml-light.cmxa: xml_light_errors.cmx xml_light_dtd_check.cmx \
  xml_parser.cmx xml_lexer.cmx dtd.cmx xmlParser.cmx xml.cmx
	$(OCAMLOPT) -o xml-light.cmxa $(LFLAGS) $(LIBS) $^

xml-light.cmxs: xml-light.cmxa
	$(OCAMLOPT) -shared -linkall -I . -o xml-light.cmxs xml-light.cmxa

## The following is the output of 'make xml_lexer.ml xml_parser.ml; ocamldep *.ml *.mli'
# BEGIN OCAMLDEP OUTPUT
dtd.cmo : \
    xml_light_types.cmi \
    xml_light_errors.cmo \
    xml_light_dtd_check.cmi \
    xml_lexer.cmi \
    dtd.cmi
dtd.cmx : \
    xml_light_types.cmi \
    xml_light_errors.cmx \
    xml_light_dtd_check.cmx \
    xml_lexer.cmx \
    dtd.cmi
dtd.cmi : \
    xml_light_types.cmi \
    xml_light_errors.cmo \
    xml_light_dtd_check.cmi
test.cmo : \
    xml.cmi \
    dtd.cmi
test.cmx : \
    xml.cmx \
    dtd.cmx
xml.cmo : \
    xml_light_types.cmi \
    xml_light_errors.cmo \
    xml_lexer.cmi \
    xmlParser.cmi \
    dtd.cmi \
    xml.cmi
xml.cmx : \
    xml_light_types.cmi \
    xml_light_errors.cmx \
    xml_lexer.cmx \
    xmlParser.cmx \
    dtd.cmx \
    xml.cmi
xml.cmi : \
    xml_light_types.cmi \
    xml_light_errors.cmo
xmlParser.cmo : \
    xml_light_types.cmi \
    xml_light_errors.cmo \
    xml_light_dtd_check.cmi \
    xml_lexer.cmi \
    dtd.cmi \
    xmlParser.cmi
xmlParser.cmx : \
    xml_light_types.cmi \
    xml_light_errors.cmx \
    xml_light_dtd_check.cmx \
    xml_lexer.cmx \
    dtd.cmx \
    xmlParser.cmi
xmlParser.cmi : \
    xml_light_types.cmi \
    xml_light_dtd_check.cmi
xml_lexer.cmo : \
    xml_parser.cmi \
    xml_light_types.cmi \
    xml_lexer.cmi
xml_lexer.cmx : \
    xml_parser.cmx \
    xml_light_types.cmi \
    xml_lexer.cmi
xml_lexer.cmi : \
    xml_light_types.cmi
xml_light_dtd_check.cmo : \
    xml_light_types.cmi \
    xml_light_errors.cmo \
    xml_light_dtd_check.cmi
xml_light_dtd_check.cmx : \
    xml_light_types.cmi \
    xml_light_errors.cmx \
    xml_light_dtd_check.cmi
xml_light_dtd_check.cmi : \
    xml_light_types.cmi
xml_light_errors.cmo :
xml_light_errors.cmx :
xml_light_types.cmi :
xml_parser.cmo : \
    xml_light_types.cmi \
    xml_parser.cmi
xml_parser.cmx : \
    xml_light_types.cmi \
    xml_parser.cmi
xml_parser.cmi : \
    xml_light_types.cmi
# END OCAMLDEP OUTPUT

clean:
	rm -f xml_lexer.ml xml_parser.mli xml_parser.ml
	rm -f xml-light.cma test.exe *.cmo *.cmi
	rm -f xml-light.lib xml-light.a xml-light.cmxa xml-light.cmxs test_opt.exe *.cmx *.obj *.o

# SUFFIXES
.ml.cmo:
	$(OCAMLC) $(CFLAGS) -c $<

.ml.cmx:
	$(OCAMLOPT) $(CFLAGS) -c $<

.mli.cmi:
	$(OCAMLC) $(CFLAGS) -c $<

xml_lexer.ml xml_lexer.mli: xml_lexer.mll
	ocamllex $<

xml_parser.ml xml_parser.mli: xml_parser.mly
	ocamlyacc $<
